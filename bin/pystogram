#!/usr/bin/env python

"""
pystogram -- Display time-series histograms of Apache-style log files on the command-line.

Sample output:

    $ grep lolcat /var/log/access.log | pystogram
    2013-07-01 07:12  ##                                                   
    2013-07-01 07:13  ####                                                700
    2013-07-01 07:14  #######                                            1234
    2013-07-01 07:15  ############################                       6873
    2013-07-01 07:16  ##############                                     3928
    2013-07-01 07:17  #################                                  4152
    2013-07-01 07:18  ###############################################   16432
    2013-07-01 07:19  ######                                               35
    2013-07-01 07:20  #                                                     7
"""

import datetime
import fileinput
import re
import time

from pystogram.dateutil import MONTHS
from pystogram.histogram import Histogram


# FIXME: Determine width from command-line options or console dimensions
WIDTH = 80

# FIXME: Allow resolution to be specified on command line
RESOLUTION = None

# FIXME: Make the regex configurable: strptime format string --> regex
TIMESTAMP_REGEX = re.compile(
    r' \[(?P<day>\d{2})/(?P<month>\w{3})/(?P<year>\d{4}):'
    r'(?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2})(?P<offset>\s?(\+|-)\d+)?\] '
)

def get_timestamp(line):
    # FIXME: Parse the timestamp with time.strptime()
    match = TIMESTAMP_REGEX.search(line)
    if match:
        return time.struct_time(sequence=(int(match.group('year')),
                                          MONTHS[match.group('month')],
                                          int(match.group('day')),
                                          int(match.group('hour')),
                                          int(match.group('minute')),
                                          int(match.group('second')),
                                          0, 0, 0))[0:6]

def main():
    histogram = Histogram()

    for line in fileinput.input():
        timestamp = get_timestamp(line)
        if timestamp is not None:
            histogram.incr(timestamp)

    for bucket in histogram.buckets(RESOLUTION):
        print bucket

if __name__ == '__main__':
    main()
